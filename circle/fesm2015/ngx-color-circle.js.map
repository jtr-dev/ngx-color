{"version":3,"file":"ngx-color-circle.js","sources":["../../../../src/lib/components/circle/circle-swatch.component.ts","../../../../src/lib/components/circle/circle.component.ts","../../../../src/lib/components/circle/ngx-color-circle.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'color-circle-swatch',\n  template: `\n  <div class=\"circle-swatch\"\n    [style.width.px]=\"circleSize\" [style.height.px]=\"circleSize\"\n    [style.margin-right.px]=\"circleSpacing\" [style.margin-bottom.px]=\"circleSpacing\"\n    >\n    <color-swatch\n      [color]=\"color\" [style]=\"swatchStyle\" [focus]=\"focus\" [focusStyle]=\"focusStyle\"\n      (onClick)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\">\n    </color-swatch>\n    <div class=\"clear\"></div>\n  </div>\n  `,\n  styles: [\n    `\n  .circle-swatch {\n    transform: scale(1);\n    transition: transform 100ms ease;\n  }\n  .circle-swatch:hover {\n    transform: scale(1.2);\n  }\n  `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class CircleSwatchComponent implements OnChanges {\n  @Input() color!: string;\n  @Input() circleSize = 28;\n  @Input() circleSpacing = 14;\n  @Input() focus = false;\n  @Output() onClick = new EventEmitter<any>();\n  @Output() onSwatchHover = new EventEmitter<any>();\n  focusStyle: Record<string, string> = {};\n  swatchStyle: Record<string, string> = {\n    borderRadius: '50%',\n    background: 'transparent',\n    transition: '100ms box-shadow ease 0s',\n  };\n\n  ngOnChanges() {\n    this.swatchStyle.boxShadow = `inset 0 0 0 ${this.circleSize / 2}px ${this.color}`;\n    this.focusStyle.boxShadow = `inset 0 0 0 ${ this.circleSize / 2 }px ${ this.color }, 0 0 5px ${ this.color }`;\n    if (this.focus) {\n      this.focusStyle.boxShadow = `inset 0 0 0 3px ${ this.color }, 0 0 5px ${ this.color }`;\n    }\n  }\n  handleClick({ hex, $event }) {\n    this.onClick.emit({ hex, $event });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport {\n  amber,\n  blue,\n  blueGrey,\n  brown,\n  cyan,\n  deepOrange,\n  deepPurple,\n  green,\n  indigo,\n  lightBlue,\n  lightGreen,\n  lime,\n  orange,\n  pink,\n  purple,\n  red,\n  teal,\n  yellow,\n} from 'material-colors';\nimport { TinyColor } from '@ctrl/tinycolor';\n\nimport { ColorWrap, SwatchModule, isValidHex } from 'ngx-color';\nimport { CircleSwatchComponent } from './circle-swatch.component';\n\n@Component({\n  selector: 'color-circle',\n  template: `\n    <div\n      class=\"circle-picker {{ className }}\"\n      [style.width.px]=\"width\"\n      [style.margin-right.px]=\"-circleSpacing\"\n      [style.margin-bottom.px]=\"-circleSpacing\"\n    >\n      <color-circle-swatch\n        *ngFor=\"let color of colors\"\n        [circleSize]=\"circleSize\"\n        [circleSpacing]=\"circleSpacing\"\n        [color]=\"color\"\n        [focus]=\"isActive(color)\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onSwatchHover)=\"onSwatchHover.emit($event)\"\n      ></color-circle-swatch>\n    </div>\n  `,\n  styles: [\n    `\n      .circle-picker {\n        display: flex;\n        flex-wrap: wrap;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class CircleComponent extends ColorWrap {\n  /** Pixel value for picker width */\n  @Input() width: string | number = 252;\n  /** Color squares to display */\n  @Input()\n  colors: string[] = [\n    red['500'],\n    pink['500'],\n    purple['500'],\n    deepPurple['500'],\n    indigo['500'],\n    blue['500'],\n    lightBlue['500'],\n    cyan['500'],\n    teal['500'],\n    green['500'],\n    lightGreen['500'],\n    lime['500'],\n    yellow['500'],\n    amber['500'],\n    orange['500'],\n    deepOrange['500'],\n    brown['500'],\n    blueGrey['500'],\n  ];\n  /** Value for circle size */\n  @Input() circleSize = 28;\n  /** Value for spacing between circles */\n  @Input() circleSpacing = 14;\n\n  constructor() {\n    super();\n  }\n  isActive(color: string) {\n    return new TinyColor(this.hex).equals(color);\n  }\n  handleBlockChange({ hex, $event }: { hex: string, $event: Event }) {\n    if (isValidHex(hex)) {\n      this.handleChange({ hex, source: 'hex' }, $event);\n    }\n  }\n  handleValueChange({ data, $event }) {\n    this.handleChange(data, $event);\n  }\n}\n\n@NgModule({\n  declarations: [CircleComponent, CircleSwatchComponent],\n  exports: [CircleComponent, CircleSwatchComponent],\n  imports: [CommonModule, SwatchModule],\n})\nexport class ColorCircleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './circle.component';\n\nexport {CircleSwatchComponent as Éµa} from './circle-swatch.component';"],"names":[],"mappings":"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"}